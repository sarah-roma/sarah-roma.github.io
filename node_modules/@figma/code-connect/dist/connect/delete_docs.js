"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.delete_docs = void 0;
const logging_1 = require("../common/logging");
const axios_1 = __importStar(require("axios"));
const figma_rest_api_1 = require("./figma_rest_api");
const helpers_1 = require("./helpers");
async function delete_docs({ accessToken, docs }) {
    const apiUrl = (0, figma_rest_api_1.getApiUrl)(docs?.[0]?.figmaNode ?? '') + '/code_connect';
    try {
        logging_1.logger.info(`Unpublishing Code Connect files from Figma...`);
        const response = await axios_1.default.delete(apiUrl, {
            headers: (0, figma_rest_api_1.getHeaders)(accessToken),
            data: { nodes_to_delete: docs },
        });
        logging_1.logger.info(`Successfully deleted:\n${docs.map((doc) => `-> ${doc.figmaNode} (${doc.label})`).join('\n')}`);
    }
    catch (err) {
        if ((0, axios_1.isAxiosError)(err)) {
            if (err.response) {
                logging_1.logger.error(`Failed to upload to Figma (${err.code}): ${err.response?.status} ${err.response?.data?.err ?? err.response?.data?.message}`);
            }
            else {
                logging_1.logger.error(`Failed to upload to Figma: ${err.message}`);
            }
            logging_1.logger.debug(JSON.stringify(err.response?.data));
        }
        else {
            logging_1.logger.error(`Failed to delete docs: ${err}`);
        }
        (0, helpers_1.exitWithFeedbackMessage)(1);
    }
}
exports.delete_docs = delete_docs;
//# sourceMappingURL=delete_docs.js.map