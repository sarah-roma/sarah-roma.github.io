"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const autolinking_1 = require("../../autolinking");
const polaris_react_1 = __importDefault(require("./test_cases/polaris_react"));
const vitamin_web_1 = __importDefault(require("./test_cases/vitamin_web"));
const TEST_CASES = [vitamin_web_1.default, polaris_react_1.default];
describe('autolinking', () => {
    TEST_CASES.forEach((testCase) => {
        const guidToName = {};
        testCase.figmaComponents.forEach(({ name, id }) => {
            guidToName[id] = name;
        });
        it(`Autolinking meets acceptable threshold for ${testCase.name}`, () => {
            const linkedNodeIdsToPaths = {};
            (0, autolinking_1.autoLinkComponents)({
                linkedNodeIdsToPaths,
                unconnectedComponents: testCase.figmaComponents,
                componentPaths: testCase.componentPaths,
            });
            const result = {
                correct: {},
                falsePositives: {},
                misses: {},
            };
            Object.entries(linkedNodeIdsToPaths).forEach(([nodeId, path]) => {
                const resultType = nodeId in testCase.perfectResult && path === testCase.perfectResult[nodeId]
                    ? 'correct'
                    : 'falsePositives';
                const componentName = guidToName[nodeId];
                result[resultType][`${componentName} (${nodeId})`] = path;
            });
            Object.entries(testCase.perfectResult).forEach(([nodeId, path]) => {
                if (!linkedNodeIdsToPaths[nodeId]) {
                    const componentName = guidToName[nodeId];
                    result.misses[`${componentName} (${nodeId})`] = path;
                }
            });
            const passRate = Object.keys(result.correct).length / Object.keys(testCase.perfectResult).length;
            if (passRate < testCase.passThreshold) {
                console.error(JSON.stringify(result, null, 2));
            }
            expect(passRate).toBeGreaterThanOrEqual(testCase.passThreshold);
        });
    });
});
//# sourceMappingURL=autolinking.test.js.map