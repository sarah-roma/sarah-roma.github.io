"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const connect = __importStar(require("../../../commands/connect"));
const project = __importStar(require("../../project"));
const run_wizard_1 = require("../run_wizard");
const _stripAnsi = require('strip-ansi');
const MOCK_COMPONENTS = [
    {
        type: 'COMPONENT',
        name: 'a reeeeeeeally long component name',
        id: '1:11',
        children: [],
        componentPropertyDefinitions: {},
    },
    {
        type: 'COMPONENT',
        name: 'another component',
        id: '1:12',
        children: [],
        componentPropertyDefinitions: {},
    },
    {
        type: 'COMPONENT',
        name: 'different component',
        id: '1:13',
        children: [],
        componentPropertyDefinitions: {},
    },
];
describe('getComponentChoicesForPrompt', () => {
    it('returns a sorted list of linked + unlinked formatted choices', () => {
        const result = (0, run_wizard_1.getComponentChoicesForPrompt)(MOCK_COMPONENTS, {
            '1:12': '/some/component/path.tsx',
        }, [], '/');
        expect(result.map((r) => _stripAnsi(r.title))).toEqual([
            `Figma component: another component                   ↔️ ${path_1.default.join('some', 'component', 'path.tsx')}`,
            `Figma component: a reeeeeeeally long component name  ↔️ -`,
            `Figma component: different component                 ↔️ -`,
        ]);
    });
    it('returns results relative to dir', () => {
        const result = (0, run_wizard_1.getComponentChoicesForPrompt)(MOCK_COMPONENTS, {
            '1:12': '/some/component/path.tsx',
        }, [], '/some');
        expect(result.map((r) => _stripAnsi(r.title))).toEqual([
            `Figma component: another component                   ↔️ ${path_1.default.join('component', 'path.tsx')}`,
            `Figma component: a reeeeeeeally long component name  ↔️ -`,
            `Figma component: different component                 ↔️ -`,
        ]);
    });
    it('displays already connected components underneath unconnected components', () => {
        const result = (0, run_wizard_1.getComponentChoicesForPrompt)([MOCK_COMPONENTS[0]], {}, [
            {
                componentName: 'some connected component',
                path: '/foo/connectedComponent1.tsx',
            },
            {
                componentName: 'another connected component',
                path: '/foo/connectedComponent2.tsx',
            },
        ], '/');
        expect(result.map((r) => _stripAnsi(r.title))).toEqual([
            `Figma component: a reeeeeeeally long component name  ↔️ -`,
            `Figma component: some connected component            ↔️ /foo/connectedComponent1.tsx`,
            `Figma component: another connected component         ↔️ /foo/connectedComponent2.tsx`,
        ]);
    });
});
describe('getUnconnectedComponentsAndConnectedComponentMappings', () => {
    it('correctly derives connected / unconnected components', async () => {
        jest.spyOn(project, 'getGitRepoAbsolutePath').mockReturnValue('/user/me/my-repo');
        jest.spyOn(connect, 'getCodeConnectObjects').mockReturnValue(new Promise((resolve) => resolve([
            {
                figmaNode: 'https://figma.com/design/someFileId/wow?node-id=1:11',
                label: 'React',
                language: 'typescript',
                component: 'Modal',
                source: 'https://github.com/some-user/my-design-system/blob/main/components/Modal.tsx',
                sourceLocation: { line: 2 },
                template: '',
                templateData: {
                    props: {
                        property: {
                            kind: 'enum',
                            args: {
                                figmaPropName: 'Property 1',
                                valueMapping: { Default: 'default', Variant2: 'variant2' },
                            },
                        },
                    },
                    imports: ['import { Modal } from "./Modal"'],
                    nestable: true,
                },
                metadata: { cliVersion: '1.0.1' },
            },
        ])));
        const result = await (0, run_wizard_1.getUnconnectedComponentsAndConnectedComponentMappings)({
            dir: '/user/me/my-repo/components',
        }, 'https://figma.com/design/someFileId/abc', MOCK_COMPONENTS, {});
        expect(result).toEqual({
            unconnectedComponents: [
                {
                    type: 'COMPONENT',
                    name: 'another component',
                    id: '1:12',
                    children: [],
                    componentPropertyDefinitions: {},
                },
                {
                    type: 'COMPONENT',
                    name: 'different component',
                    id: '1:13',
                    children: [],
                    componentPropertyDefinitions: {},
                },
            ],
            connectedComponentsMappings: [
                { componentName: 'a reeeeeeeally long component name', path: 'Modal.tsx' },
            ],
        });
    });
});
describe('convertRemoteFileUrlToRelativePath', () => {
    it('converts to relative path', () => {
        const result = (0, run_wizard_1.convertRemoteFileUrlToRelativePath)({
            remoteFileUrl: 'https://github.com/slees-figma/sims-design-system/blob/main/components/ds/Modal.tsx',
            gitRootPath: '/user/me/my-repo',
            dir: '/user/me/my-repo/components',
        });
        expect(result).toBe(path_1.default.join('ds', 'Modal.tsx'));
    });
});
//# sourceMappingURL=run_wizard.test.js.map