"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCodeConnectConfig = exports.getIncludesGlob = void 0;
const prettier = __importStar(require("prettier"));
const fs_1 = __importDefault(require("fs"));
const project_1 = require("../project");
const logging_1 = require("../../common/logging");
const path_1 = __importDefault(require("path"));
/**
 *
 * Gets the default include globs for config.parser with componentDirectory prepended
 * @param args
 * @param args.dir project root path
 * @param args.componentDirectory optional path to where includes should be limited to
 * @param args.config CodeConnectConfig
 * @returns array of include globs
 */
function getIncludesGlob({ dir, componentDirectory, config, }) {
    if (componentDirectory) {
        // use unix separators for config file globs
        const pathToComponentsDir = path_1.default.relative(dir, componentDirectory).replaceAll(path_1.default.sep, '/');
        return project_1.DEFAULT_INCLUDE_GLOBS_BY_PARSER[config.parser].map((defaultIncludeGlob) => `${pathToComponentsDir}/${defaultIncludeGlob}`);
    }
    return project_1.DEFAULT_INCLUDE_GLOBS_BY_PARSER[config.parser];
}
exports.getIncludesGlob = getIncludesGlob;
async function createCodeConnectConfig({ dir, componentDirectory, config, }) {
    const includesGlob = getIncludesGlob({ dir, componentDirectory, config });
    const configJson = `
{
  "codeConnect": {
    "include": ["${includesGlob}"]
  }
}
  `;
    const formatted = await prettier.format(configJson, {
        parser: 'json',
    });
    const filePath = (0, project_1.getDefaultConfigPath)(dir);
    fs_1.default.writeFileSync(filePath, formatted);
    logging_1.logger.info((0, logging_1.success)(`Created ${filePath}`));
}
exports.createCodeConnectConfig = createCodeConnectConfig;
//# sourceMappingURL=helpers.js.map