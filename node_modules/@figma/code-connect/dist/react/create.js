"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReactCodeConnect = void 0;
const lodash_1 = require("lodash");
const prettier = __importStar(require("prettier"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function isBooleanKind(propValue) {
    const normalized = propValue.toLowerCase();
    return (normalized === 'true' ||
        normalized === 'false' ||
        normalized === 'yes' ||
        normalized === 'no' ||
        normalized === 'on' ||
        normalized === 'off');
}
function normalizePropName(name) {
    return name.replace(/#[0-9:]*/g, '');
}
function generateCodePropName(name) {
    return (0, lodash_1.camelCase)(name.replace(/[^a-zA-Z0-9]/g, ''));
}
function normalizePropValue(name) {
    // Convert the string to kebab-case
    return name.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
}
function generateProps(component) {
    const props = [];
    if (!component.componentPropertyDefinitions ||
        Object.keys(component.componentPropertyDefinitions).length === 0) {
        return `{}`;
    }
    for (const [propName, propDef] of Object.entries(component.componentPropertyDefinitions)) {
        const codePropName = generateCodePropName(propName);
        const figmaPropName = normalizePropName(propName);
        if (propDef.type === 'BOOLEAN') {
            props.push(`"${codePropName}": figma.boolean('${figmaPropName}')`);
        }
        if (propDef.type === 'TEXT') {
            props.push(`"${codePropName}": figma.string('${figmaPropName}')`);
        }
        if (propDef.type === 'VARIANT') {
            const isBooleanVariant = propDef.variantOptions?.length === 2 && propDef.variantOptions.every(isBooleanKind);
            if (isBooleanVariant) {
                props.push(`"${codePropName}": figma.boolean('${figmaPropName}')`);
            }
            else {
                props.push(`"${codePropName}": figma.enum('${figmaPropName}', { \n${propDef.variantOptions
                    ?.map((value) => `  "${value}": "${normalizePropValue(value)}"`)
                    .join(',\n')}})`);
            }
        }
        if (propDef.type === 'INSTANCE_SWAP') {
            props.push(`"${codePropName}": figma.instance('${figmaPropName}')`);
        }
    }
    return `{
  ${props.join(',\n  ')}
}`;
}
function getOutFileName({ outFile, outDir, componentName, }) {
    if (outFile) {
        return outFile;
    }
    const baseName = `${componentName}.figma.tsx`;
    if (outDir) {
        return path_1.default.join(outDir, baseName);
    }
    return path_1.default.join(process.env.INIT_CWD ?? process.cwd(), baseName);
}
async function createReactCodeConnect(payload) {
    const { component, destinationFile, destinationDir } = payload;
    const { normalizedName, figmaNodeUrl } = component;
    const filePath = getOutFileName({
        outFile: destinationFile,
        outDir: destinationDir,
        componentName: normalizedName,
    });
    const codeConnect = `
import React from 'react'
import { ${normalizedName} } from './${normalizedName}'
import figma from '@figma/code-connect'

/**
 * -- This file was auto-generated by \`figma connect create\` --
 * \`props\` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the \`example\` function to return the
 * code example you'd like to see in Figma
*/

figma.connect(${normalizedName}, "${figmaNodeUrl}", {
  props: ${generateProps(component)},
  example: (props) => <${normalizedName} />
})
`;
    let formatted = await prettier.format(codeConnect, {
        parser: 'typescript',
        semi: false,
        trailingComma: 'all',
    });
    if (fs_1.default.existsSync(filePath)) {
        return {
            createdFiles: [],
            messages: [{ message: `File ${filePath} already exists, skipping creation`, level: 'ERROR' }],
        };
    }
    fs_1.default.mkdirSync(path_1.default.dirname(filePath), { recursive: true });
    fs_1.default.writeFileSync(filePath, formatted);
    return { createdFiles: [{ filePath }], messages: [] };
}
exports.createReactCodeConnect = createReactCodeConnect;
//# sourceMappingURL=create.js.map